package gb

class Opcodes() {

  def execute(opcode: Int, cpu: Cpu) = opcode match {

    //    case 0x0 => NOP
    case 0x1 => LDBCnn
    case 0x2 => LDBCmA
    case 0x3 => INCBC
    case 0x4 => INCr_b
    case 0x5 => DECr_b
    case 0x6 => LDrn_b
    case 0x7 => RLCA
    case 0x8 => LDmmSP
    case 0x9 => ADDHLBC
    case 0xa => LDABCm
    case 0xb => DECBC
    case 0xc => INCr_c
    case 0xd => DECr_c
    case 0xe => LDrn_c
    case 0xf => RRCA
    case 0x10 => DJNZn
    case 0x11 => LDDEnn
    case 0x12 => LDDEmA
    case 0x13 => INCDE
    case 0x14 => INCr_d
    case 0x15 => DECr_d
    case 0x16 => LDrn_d
    case 0x17 => RLA
    case 0x18 => JRn
    case 0x19 => ADDHLDE
    case 0x1a => LDADEm
    case 0x1b => DECDE
    case 0x1c => INCr_e
    case 0x1d => DECr_e
    case 0x1e => LDrn_e
    case 0x1f => RRA
    case 0x20 => JRNZn
    case 0x21 => LDHLnn
    case 0x22 => LDHLIA
    case 0x23 => INCHL
    case 0x24 => INCr_h
    case 0x25 => DECr_h
    case 0x26 => LDrn_h
    case 0x27 => DAA
    case 0x28 => JRZn
    case 0x29 => ADDHLHL
    case 0x2a => LDAHLI
    case 0x2b => DECHL
    case 0x2c => INCr_l
    case 0x2d => DECr_l
    case 0x2e => LDrn_l
    case 0x2f => CPL
    case 0x30 => JRNCn
    case 0x31 => LDSPnn
    case 0x32 => LDHLDA
    case 0x33 => INCSP
    case 0x34 => INCHLm
    case 0x35 => DECHLm
    case 0x36 => LDHLmn
    case 0x37 => SCF
    case 0x38 => JRCn
    case 0x39 => ADDHLSP
    case 0x3a => LDAHLD
    case 0x3b => DECSP
    case 0x3c => INCr_a
    case 0x3d => DECr_a
    case 0x3e => LDrn_a
    case 0x3f => CCF
    case 0x40 => LDrr_bb
    case 0x41 => LDrr_bc
    case 0x42 => LDrr_bd
    case 0x43 => LDrr_be
    case 0x44 => LDrr_bh
    case 0x45 => LDrr_bl
    case 0x46 => LDrHLm_b
    case 0x47 => LDrr_ba
    case 0x48 => LDrr_cb
    case 0x49 => LDrr_cc
    case 0x4a => LDrr_cd
    case 0x4b => LDrr_ce
    case 0x4c => LDrr_ch
    case 0x4d => LDrr_cl
    case 0x4e => LDrHLm_c
    case 0x4f => LDrr_ca
    case 0x50 => LDrr_db
    case 0x51 => LDrr_dc
    case 0x52 => LDrr_dd
    case 0x53 => LDrr_de
    case 0x54 => LDrr_dh
    case 0x55 => LDrr_dl
    case 0x56 => LDrHLm_d
    case 0x57 => LDrr_da
    case 0x58 => LDrr_eb
    case 0x59 => LDrr_ec
    case 0x5a => LDrr_ed
    case 0x5b => LDrr_ee
    case 0x5c => LDrr_eh
    case 0x5d => LDrr_el
    case 0x5e => LDrHLm_e
    case 0x5f => LDrr_ea
    case 0x60 => LDrr_hb
    case 0x61 => LDrr_hc
    case 0x62 => LDrr_hd
    case 0x63 => LDrr_he
    case 0x64 => LDrr_hh
    case 0x65 => LDrr_hl
    case 0x66 => LDrHLm_h
    case 0x67 => LDrr_ha
    case 0x68 => LDrr_lb
    case 0x69 => LDrr_lc
    case 0x6a => LDrr_ld
    case 0x6b => LDrr_le
    case 0x6c => LDrr_lh
    case 0x6d => LDrr_ll
    case 0x6e => LDrHLm_l
    case 0x6f => LDrr_la
    case 0x70 => LDHLmr_b
    case 0x71 => LDHLmr_c
    case 0x72 => LDHLmr_d
    case 0x73 => LDHLmr_e
    case 0x74 => LDHLmr_h
    case 0x75 => LDHLmr_l
    case 0x76 => HALT
    case 0x77 => LDHLmr_a
    case 0x78 => LDrr_ab
    case 0x79 => LDrr_ac
    case 0x7a => LDrr_ad
    case 0x7b => LDrr_ae
    case 0x7c => LDrr_ah
    case 0x7d => LDrr_al
    case 0x7e => LDrHLm_a
    case 0x7f => LDrr_aa
    case 0x80 => ADDr_b
    case 0x81 => ADDr_c
    case 0x82 => ADDr_d
    case 0x83 => ADDr_e
    case 0x84 => ADDr_h
    case 0x85 => ADDr_l
    case 0x86 => ADDHL
    case 0x87 => ADDr_a
    case 0x88 => ADCr_b
    case 0x89 => ADCr_c
    case 0x8a => ADCr_d
    case 0x8b => ADCr_e
    case 0x8c => ADCr_h
    case 0x8d => ADCr_l
    case 0x8e => ADCHL
    case 0x8f => ADCr_a
    case 0x90 => SUBr_b
    case 0x91 => SUBr_c
    case 0x92 => SUBr_d
    case 0x93 => SUBr_e
    case 0x94 => SUBr_h
    case 0x95 => SUBr_l
    case 0x96 => SUBHL
    case 0x97 => SUBr_a
    case 0x98 => SBCr_b
    case 0x99 => SBCr_c
    case 0x9a => SBCr_d
    case 0x9b => SBCr_e
    case 0x9c => SBCr_h
    case 0x9d => SBCr_l
    case 0x9e => SBCHL
    case 0x9f => SBCr_a
    case 0xa0 => ANDr_b
    case 0xa1 => ANDr_c
    case 0xa2 => ANDr_d
    case 0xa3 => ANDr_e
    case 0xa4 => ANDr_h
    case 0xa5 => ANDr_l
    case 0xa6 => ANDHL
    case 0xa7 => ANDr_a
    case 0xa8 => XORr_b
    case 0xa9 => XORr_c
    case 0xaa => XORr_d
    case 0xab => XORr_e
    case 0xac => XORr_h
    case 0xad => XORr_l
    case 0xae => XORHL
    case 0xaf => XORr_a
    case 0xb0 => ORr_b
    case 0xb1 => ORr_c
    case 0xb2 => ORr_d
    case 0xb3 => ORr_e
    case 0xb4 => ORr_h
    case 0xb5 => ORr_l
    case 0xb6 => ORHL
    case 0xb7 => ORr_a
    case 0xb8 => CPr_b
    case 0xb9 => CPr_c
    case 0xba => CPr_d
    case 0xbb => CPr_e
    case 0xbc => CPr_h
    case 0xbd => CPr_l
    case 0xbe => CPHL
    case 0xbf => CPr_a
    case 0xc0 => RETNZ
    case 0xc1 => POPBC
    case 0xc2 => JPNZnn
    case 0xc3 => JPnn
    case 0xc4 => CALLNZnn
    case 0xc5 => PUSHBC
    case 0xc6 => ADDn
    case 0xc7 => RST00
    case 0xc8 => RETZ
    case 0xc9 => RET
    case 0xca => JPZnn
    case 0xcb => MAPcb
    case 0xcc => CALLZnn
    case 0xcd => CALLnn
    case 0xce => ADCn
    case 0xcf => RST08
    case 0xd0 => RETNC
    case 0xd1 => POPDE
    case 0xd2 => JPNCnn
    case 0xd3 => XX
    case 0xd4 => CALLNCnn
    case 0xd5 => PUSHDE
    case 0xd6 => SUBn
    case 0xd7 => RST10
    case 0xd8 => RETC
    case 0xd9 => RETI
    case 0xda => JPCnn
    case 0xdb => XX
    case 0xdc => CALLCnn
    case 0xdd => XX
    case 0xde => SBCn
    case 0xdf => RST18
    case 0xe0 => LDIOnA
    case 0xe1 => POPHL
    case 0xe2 => LDIOCA
    case 0xe3 => XX
    case 0xe4 => XX
    case 0xe5 => PUSHHL
    case 0xe6 => ANDn
    case 0xe7 => RST20
    case 0xe8 => ADDSPn
    case 0xe9 => JPHL
    case 0xea => LDmmA
    case 0xeb => XX
    case 0xec => XX
    case 0xed => XX
    case 0xee => XORn
    case 0xef => RST28
    case 0xf0 => LDAIOn
    case 0xf1 => POPAF
    case 0xf2 => LDAIOC
    case 0xf3 => DI
    case 0xf4 => XX
    case 0xf5 => PUSHAF
    case 0xf6 => ORn
    case 0xf7 => RST30
    case 0xf8 => LDHLSPn
    case 0xf9 => XX
    case 0xfa => LDAmm
    case 0xfb => EI
    case 0xfc => XX
    case 0xfd => XX
    case 0xfe => CPn
    case 0xff => RST38
  }

  //TODO
  def JP_NN_C3(opcode: Int, cpu: Cpu) = {
    cpu.registers.pc = cpu.memory.readByte16(cpu.registers.pc, cpu)
  }

  //TODO
  def LD_C_0E(opcode: Int, cpu: Cpu) = {
    cpu.registers.pc += 1
  }

  //TODO
  def LD_NN_21(opcode: Int, cpu: Cpu) = {
    cpu.registers.pc += 2
  }

  def NOP_00(opcode: Int, cpu: Cpu) = {
    cpu.registers.lastInstrClockm = 1
    cpu.registers.lastInstrClockt = 4
  }

  //TODO
  def XOR_A_AF(opcode: Int, cpu: Cpu) = {
    cpu.registers.lastInstrClockm = 1
    cpu.registers.lastInstrClockt = 4
  }

  def LDrn_b(opcode: Int, cpu: Cpu) = {
    cpu.registers.b = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }

  def LDrn_c(opcode: Int, cpu: Cpu) = {
    cpu.registers.c = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }
  def LDrn_d(opcode: Int, cpu: Cpu) = {
    cpu.registers.d = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }
  def LDrn_e(opcode: Int, cpu: Cpu) = {
    cpu.registers.e = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }
  def LDrn_h(opcode: Int, cpu: Cpu) = {
    cpu.registers.h = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }
  def LDrn_l(opcode: Int, cpu: Cpu) = {
    cpu.registers.l = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }
  def LDrn_a(opcode: Int, cpu: Cpu) = {
    cpu.registers.a = cpu.memory.readByte8(cpu.registers.pc, cpu)
    cpu.registers.pc += 1
    cpu.registers.lastInstrClockm = 2
  }

}